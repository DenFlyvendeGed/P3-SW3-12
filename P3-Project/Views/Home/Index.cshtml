@model string

@{
    if (Model == "Tøj")
    {
        ViewData["Title"] = "Tøj";
    }
    else if (Model == "Tilbehør")
    {
        ViewData["Title"] = "Tilbehør";
    }

}
<h1>@ViewData["Title"]</h1>

<div class="mainIndexScale">
    <div class="box shopTagBox">
        Tags:
        <div>
            @{
                

                foreach (Tag tag in Tag.GetAllTags())
                {
                    <div>
                        <label>@tag.Name</label>
                        <input type="checkbox" id="@tag.Id" class="Clickable" onclick="ToggleTag(this)">
                    </div>
                }
            }
        </div>
    </div>
    
    <div class="grid-container">

        @{
            int index = 1;
            foreach (ItemModel item in ViewBag.model)
            {
                item.LoadTags();
                <a style="color: black; text-decoration: none;" class="Clickable @Html.Raw(item.GetTagString()) " href="../Home/ShowItemModel?id=@(item.Id)">
                    <div class="item@(index) itemShowCase">
                        <div class="itemShowCasePic wrap">
                            @{
                               
                                ImageModel img = item.GetFirstImg();
                                if (img != null)
                                {

                                    <img class="picSize midImg" src='@img.FilePath' />
                                }

                            }
                        </div>
                        <div class="itemShowCaseName " )>
                            <div>@(item.ModelName)</div>
                            <div>Pris: @(item.ModelPrice) kr.-</div>
                        </div>

                    </div>
                </a>
                index += 1;
            }
        }

    </div>
</div>

<script>
    const tagList = [];
    const itemContainer = document.querySelector(".grid-container");
    const items = itemContainer.children;
    function ToggleTag(dom) {
        const text = dom.previousElementSibling.innerText;
        if (dom.checked) {
            tagList.push(text);
        }
        else {
            tagList.splice(tagList.indexOf(text), 1);
        }
        //console.log(tagList)



        if (tagList.length > 0) {
            let searchString = "\\s?(";
            tagList.forEach(name => {
                searchString += name + "\\s|";
            })
            searchString = searchString.slice(0, -1);
            searchString += ")"//{" + tagList.length + "}";


            const regex = new RegExp(searchString, "gm");

            console.log(searchString);
            //console.log(items)
            for (item of items) {
                //console.log(item)
                //console.log(item.classList.value)
                //console.log(item.classList.value.match(regex))

                if (item.classList.value.match(regex)?.length != tagList.length) {
                    item.style.display = "none";
                }
                else {
                    item.style.display = "";
                }
            }
        }
        else {
            for (item of items) {
                item.style.display = "";
            }
        }


        //\s((test\s+|test1\s+|test2\s+)){3}

    }


</script>
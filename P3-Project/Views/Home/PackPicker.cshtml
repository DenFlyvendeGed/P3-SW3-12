@using P3_Project.Models
@model PackModel
@{
    Layout = "_Layout";
    
    ViewData["Title"] = "Vælg pakkemuligheder";
}
<h1>@ViewData["Title"]</h1>


<div class="grid-container-PackPicker">
	<div class="PackPickerHeader"><h3 style="text-align:start;"><b>Pakke: @Model.Name</b></h3><h3 style="text-align:end;"><b>Pris: @Model.Price kr.-</b></h3></div>
	@{
		int index = 1;
		var IdIndex = 1;
		foreach (var option in Model.Options)
		{
                <div class="PackChoices"><h4><b>Valgmulighed @index</b></h4></div>
			var OptionCount = 1;
			foreach (var ItemModelId in option)
			{
				ItemModel model = ItemModel.LoadModel(ItemModelId.ToString());
				model.LoadItems();

                    <div class="PackPickerItems" id="Option@(index)">
                        
                        <div class="PackPickerImgContainer">

                            <img class="PackPickerImg" src="@(model.GetFirstImg().FilePath)" alt="@(model.Id)" onerror="this.src='../favicon.ico';" />

                        </div>
                        <div class="box Name" id="NameBox">@(model.ModelName)</div>


                        <div class="SelectOption">
                            <h5>
                                Størrelse:
                                <select style="height: 100%; font-size:12pt;">
                                    @{
									int sizeIndex = 1;
									foreach (string size in model.GetUniqueSize())
									{
                                        <option id="size@(sizeIndex)" style="font-size:12pt;">@(size)</option>
										sizeIndex += 1;
									}
                                    }
                                </select>
                            </h5>
                        </div>

                        

                        <div class="PackPickerFlexBox" id="Flexbox@(index)@(OptionCount)" onload="SetFirstColor(this)">
                            @{
							int colorIndex = 1;
                                    <h5 class="smltext">Farve:</h5>
							foreach ((string, string) color in model.GetUniqueColor())
							{
								
                                        <div class="colorBoxSelect" style="border: 2px solid transparent">
                                            <div class="colorBox" id="color@(index)@(OptionCount)@(colorIndex)" value="@(color.Item1)" style="background-color: @(color.Item2);" onclick="ColorSelect(this.id)"></div>
                                        </div>
								colorIndex += 1;
							}
                            }
                        </div>

                        <div id="CheckMarkBox" class="box CheckMark" onclick="CheckBox(this)"> </div>
                    </div>
				IdIndex++;
				OptionCount++;
			}
			index += 1;
		}
	}
</div>


<div class="box Clickable AddToCart" onclick="addToCart()">Tilføj pakke til kurv</div>
<a style="display='none'" href="PackModels" id="redirect"></a>
<script>

	document.querySelector("body").onload = function () {
		SetFirstCheckMark();
		SetFirstColor();
	}

	function CheckBox(CheckMarkBox) {
		let ParentOption = CheckMarkBox.parentElement.id;
		const CheckMark = document.createElement("img");
		CheckMark.setAttribute("class", "CheckMark-Flag");
		CheckMark.setAttribute("src", "../Pics/checkmark-svgrepo-com.svg");
		let deleteIndex = 0;


		document.querySelectorAll(`#${ParentOption}`).forEach(element => {
			let box = element.querySelector("#CheckMarkBox");
			if (box.children.length > 0) {
				box.removeChild(box.firstChild);
			}
		})

		if (CheckMarkBox.children.length == 0) {
			CheckMarkBox.appendChild(CheckMark);
		}


	}

	function SetFirstCheckMark() {

		let Elems = document.querySelectorAll(".PackChoices");
		let Index = Elems.length;
		let lastElem = Elems[Index - 1];
		let text = lastElem.firstChild.firstChild.textContent;

		let RegPattern = /[0-9]/i;
		let result = text.match(RegPattern);
		let count = parseInt(result[0]);


		for (let i = 1; i <= count; i++) {
			let Flag = document.createElement("img");
			Flag.setAttribute("class", "CheckMark-Flag");
			Flag.setAttribute("src", "../Pics/checkmark-svgrepo-com.svg");
			document.querySelector(`#Option${i}`).querySelector(".CheckMark").appendChild(Flag);
		}
	}


	function SetFirstColor() {
		document.querySelectorAll(".PackPickerItems").forEach(element => {
			let FlexBox = element.querySelector(".PackPickerFlexBox");
			let NodeList = FlexBox.querySelectorAll(".colorBoxSelect");
			let FirstElem = NodeList[0];
			FirstElem.style.border = "2px solid DodgerBlue";
		})
	}

	function ColorSelect(ID) {

		let ColorChoice = document.getElementById(ID);
		let ParentFlex = ColorChoice.parentElement.parentElement;
		if (ColorChoice.parentElement.style.border == "2px solid transparent") {
			ParentFlex.querySelectorAll(".colorBox").forEach(color => { color.parentElement.style.border = "2px solid transparent" })
			ColorChoice.parentElement.style.border = "2px solid DodgerBlue";
		}
	}


	function addToCart() {

        let SelectedValues = {

        }
        let obj = [];
        let loopindex = 0;
        document.querySelectorAll(".PackPickerItems").forEach(element => {
            if (element.querySelector("#CheckMarkBox").children.length > 0) {
                let Name = element.querySelector("#NameBox").textContent;
                let ModelPrice = element.querySelector("#NameBox").getAttribute('value');
                let Size = element.querySelector("select").value;
                let Id = element.querySelector(".PackPickerImg").alt;
                option = element;
                let FlagChoice = 0;
                let Colors = [];
                let ColArray = 0;
                option.querySelectorAll(".colorBoxSelect").forEach(color => {
                    if ((color.style.border).toString() == "2px solid dodgerblue") {
                        Colors[ColArray] = color.querySelector(".colorBox").getAttribute('value');
                        ColArray++;
                        FlagChoice++;
                    }
                })
                obj[loopindex] = { id: Id, name: Name, size: Size, ItemColors: Colors[0], ModelPrice: ModelPrice, };
                loopindex++;
            }
        })
        SelectedValues = Object.assign(SelectedValues, obj);

        let itemData = {
            packid: "@Model.PackID",
            packname: "@Model.Name",
            Price: @Model.Price,
            AmountToCart: 1,
        };
        itemData = Object.assign(itemData, SelectedValues);

        // Get the existing data
        var existing = localStorage.getItem('itemsSavedForCart');
        // If no existing data, create an array
        // Otherwise, convert the localStorage string to an array
        let itemsSavedForCart = []
        if (existing != null)
            itemsSavedForCart = JSON.parse(existing);


        itemsSavedForCart.push(itemData);
        localStorage.setItem('itemsSavedForCart', JSON.stringify(itemsSavedForCart));
            

        document.querySelector("#redirect").click();
    }
</script>

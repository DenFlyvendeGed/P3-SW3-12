@{
    ViewData["Title"] = "Tøj";
}


<div class="displayItemBox">

    @{
        ItemModel item = ViewBag.item;


        <div class="displayItem">
            <div class="box picScaling wrap">
                @{



                    ViewBag.pictures = "";
                    if (ViewBag.item != null)
                    {

                        foreach (ImageModel img in ViewBag?.item?.Pictures)
                        {
                            ViewBag.pictures += "'" + img.FilePath + "', ";
                        }
                    }

                    @*Billed placehodler*@
                    <img class="midImg" src="" />

                }

            </div>
            @*Buttons*@
            <div class="imageButtons" style="margin-top: 5%;">

                @*billed vælger*@

                @{
                    int picAmount = 0;
                    foreach (ImageModel jj in ViewBag?.item?.Pictures)
                    {
                        picAmount += 1;
                    }
                    Console.WriteLine(picAmount);
                    if (picAmount > 1)
                    {
                        <button class="ASHButton" onclick="lastPic()" style="margin:1px;">Tilbage</button>
                        <button class="ASHButton" onclick="nextPic()" style="margin:1px;">Næste</button>
                    }
                }




            </div>
        </div>


        <div class="displayItem">
            @*<------------------ModelName and price--------------------->*@
            <div class="grid-containerTop">
                <div class="grid-itemTop modelName" value="@(item.Id)^@(item.ModelName)" id="ModelName">@(item.ModelName)</div>
                <div class="grid-itemTop modelPrice" value="@(item.ModelPrice)" style="margin-top:16px;" id="ModelPrice">Pris: @(item.ModelPrice) kr.-</div>
            </div>


            @*<------------------Size--------------------->*@
            <div class="box modelAttributes">
                <div>Størrelse:</div>
                <div class="grid-containerShowcase" id="sizeChoices">

                    @{
                        int sizeIndex = 1;
                        foreach (string size in ViewBag.item.GetUniqueSize())
                        {
                            <div class="grid-itemShowcase itemSize Clickable" value="@(size)" id="size@(sizeIndex)">@size</div>
                            sizeIndex += 1;
                        }
                    }
                </div>
            </div>

            @*<------------------Color--------------------->*@
            <div class="box modelAttributes">
                <div>Farve:</div>
                <div class="grid-containerShowcase" id="colorChoices">
                    @{
                        int colorIndex = 1;
                        foreach ((string, string) color in ViewBag.item.GetUniqueColor())
                        {
                            <div class="grid-itemShowcase itemColor colorStyle Clickable" name="@(color.Item1)" value="@(color.Item2)" style="background-color: @(color.Item2);" id="color@(colorIndex)">@(color.Item1)</div>
                            colorIndex += 1;
                        }
                    }
                </div>
            </div>

            @*<------------------Description--------------------->
        *@
            <div class="box modelAttributes">
                <div>Beskrivesle:</div>
                <div>@(item.Description)</div>
            </div>


            @*<------------------Cart--------------------->*@
            <div class="box modelAttributes cartBtnLayout">
                <div>Antal:</div>

                <div class="counterGrid">
                    <input class="counterItem" type="button" id="minus" value="-">
                    <div class="counterItem" id="counter">1</div>
                    <input class="counterItem" type="button" id="plus" value="+">
                </div>

                <input type="submit" value="Tilføj til kurv" id="addToCart">
            </div>
        </div>
    }


</div>

<script>

    //Size toggle
    let currentSizeToggle;
    function toggleSize(e) {
        if (e.target.id != "sizeChoices") {
            let clicked = e.target;

            if (currentSizeToggle == undefined) {
                clicked.classList.toggle("itemSizeToggle");
                currentSizeToggle = clicked.id
            }
            else if (currentSizeToggle != undefined && currentSizeToggle != clicked.id) {
                let sizeToggled = document.getElementById(currentSizeToggle);
                sizeToggled.classList.toggle("itemSizeToggle");
                clicked.classList.toggle("itemSizeToggle");
                currentSizeToggle = clicked.id;
            }
            else if (currentSizeToggle == clicked.id) {
                clicked.classList.toggle("itemSizeToggle");
                currentSizeToggle = undefined;
            }

        }
    }

    //Color toggle
    let currentColorToggle;
    function toggleColor(e) {
        if (e.target.id != "colorChoices") {
            let clicked = e.target;

            if (currentColorToggle == undefined) {
                clicked.classList.toggle("itemColorToggle");
                currentColorToggle = clicked.id
            }
            else if (currentColorToggle != undefined && currentColorToggle != clicked.id) {
                let colorToggled = document.getElementById(currentColorToggle);
                colorToggled.classList.toggle("itemColorToggle");
                clicked.classList.toggle("itemColorToggle");
                currentColorToggle = clicked.id;
            }
            else if (currentColorToggle == clicked.id) {
                clicked.classList.toggle("itemColorToggle");
                currentColorToggle = undefined;
            }
        }
    }

    //Amount added to cart
    let currentAmount = 1;
    function changeCount(delta) {
        return function () {
            var counter = document.getElementById('counter').innerHTML;
            var parsed = parseInt(counter);
            if (delta == "plus") {
                currentAmount += 1;
                var result = parsed + 1;
                document.getElementById('counter').innerHTML = result;
            }
            else if (delta == "minus" && parsed != 1) {
                currentAmount -= 1;
                var result = parsed - 1;
                document.getElementById('counter').innerHTML = result;
            }
        }
    }

    //Create cart object
   async function addToCart() {
        if (currentColorToggle != undefined && currentSizeToggle != undefined) {
            let chosenModel = document.getElementById("ModelName").attributes.value.nodeValue;
            let chosenSize = document.getElementById(currentSizeToggle).attributes.value.nodeValue;
            let chosenColorCode = document.getElementById(currentColorToggle).attributes.value.nodeValue;
            let chosenColorName = document.getElementById(currentColorToggle).attributes.name.nodeValue;
            let chosenModelPrice = document.getElementById("ModelPrice").attributes.value.nodeValue;
          


            let NameId = chosenModel.split('^');

          
            const response = await fetch("/api/getItemId", 
            {
                method: 'GET',
                redirect: 'follow',

                headers: {
                    
                        color: encodeURI(chosenColorName),

                        size: chosenSize,
                        modelId: NameId[0],
                },
                

            })
                .then((response) => response.headers.get("itemId"));
            
               

            let itemData = {
                Id: NameId[0],
                ModelName: NameId[1],
                Price: chosenModelPrice,
                Size: chosenSize,
                Color: chosenColorName,
                ColoWheel: chosenColorCode,
                AmountToCart: currentAmount,
                ItemId: response,
            }

            console.log(itemData);

            // Get the existing data
            var existing = localStorage.getItem('itemsSavedForCart');

            console.log(existing)
            // If no existing data, create an array
            // Otherwise, convert the localStorage string to an array
            let itemsSavedForCart = []
            if (existing != null)
                itemsSavedForCart = JSON.parse(existing);


            let indexOfDuplicate = -1
            if (itemsSavedForCart.length > 0) {
                indexOfDuplicate = itemsSavedForCart.findIndex(item => {
                    return (item.Size == itemData.Size && item.Color == itemData.Color)
                })
            }
            if (indexOfDuplicate >= 0) {
                itemsSavedForCart[indexOfDuplicate].AmountToCart += itemData.AmountToCart
            }
            else {
                itemsSavedForCart.push(itemData);
            }
            //existing = existing ? existing.split(',') : [];
            // Add new data to localStorage Array
            //existing.push(JSON.stringify(itemData));

            // Save back to localStorage
            //localStorage.setItem('itemsSavedForCart', existing.toString());
            localStorage.setItem('itemsSavedForCart', JSON.stringify(itemsSavedForCart));

        }
        else {
            console.log("intet valgt");
        }



    }


    document.getElementById('minus').onclick = changeCount("minus");
    document.getElementById('plus').onclick = changeCount("plus");
    document.getElementById("colorChoices").addEventListener("click", toggleColor);
    document.getElementById("sizeChoices").addEventListener("click", toggleSize);
    document.getElementById("addToCart").addEventListener("click", addToCart);

</script>


<script>

    let currentPic = 0;
    let pictures = @(ViewBag.pictures != "" ? Html.Raw("[" + "" + ViewBag.pictures + "" + "]") : Html.Raw("[]"));

    //Scroll last picture
    function lastPic() {
        if (currentPic == 0) {
            currentPic = pictures.length - 1;
        } else {
            currentPic--;
        }
        showImg(currentPic);
    }

    //Scroll next picture
    function nextPic() {
        if (currentPic == pictures.length - 1) {
            currentPic = 0;
        } else {
            currentPic++;
        }
        showImg(currentPic);
    }

    //Display picture in box
    function showImg(pic) {
        //console.log(currentPic);
        if (pictures[pic] != undefined) {
            const imgDom = document.querySelector('.displayItem img');
            imgDom.setAttribute('src', pictures[pic]);
        }
    }

    if (@(ViewBag.pictures != "" ? Html.Raw("true") : Html.Raw("false"))) {
        nextPic();
    }
</script>
@model P3_Project.Models.ItemModel
@{
    Layout = "AdminLayout";

    ViewData["Title"] = "Tilføj vare";
}
<h4>Opret genstand</h4>


<script>
    document.querySelector('#AddItemModelSite').style = ("color: rgb(59, 146, 178) !important");
</script>


<div class="container">

    
    <div id="imgBox" class="center">
        <div id="img" class="center">
            @*Billed placehodler*@
            <img id="prodImg" src=""/>
            @*Buttons*@
            <div>
                @*billed vælger*@
                <button onclick="lastPic()">Tilbage</button>
                <button onclick="nextPic()">Næste</button>
                @*Upload knap*@
                <button id="uploadButton" class="center ASHButton" onclick="document.getElementById('imgUp').click();">Upload Billed</button>
                <input type="file" multiple accept="image/*" id="imgUp" style="visibility: hidden;" onchange="saveImg">
            </div>
        </div>
    </div>


    <script>
        
        let pictures = [];
        let currentPic = 0;
        const input = document.querySelector('input');
        const log = document.getElementById('imgUp');
        const imgTag = document.querySelector('#img img');

        input.addEventListener('input', saveImg);

        function lastPic() {
            if(currentPic == 0){
                currentPic = pictures.length;
            }else{
                currentPic--;
            }
            showImg(pictures[currentPic]);
        }

        function nextPic() {
            if (currentPic == pictures.length) {
                currentPic = 0;
            } else {
                currentPic++;
            }
            showImg(pictures[currentPic]);
        }

        function showImg(pic){
            imgTag.setAttribute('src', pic);
        }

        async function saveImg(e){
            
            var reader = new FileReader();
            
            reader.onload = function (e) {
                imgTag.setAttribute('src', e.target.result);
                pictures.push(e.target.result);
                //fetch('/Admin/uploadItemModel', {
                //    method: "Post",
                //    body: JSON.stringify({img: e.target.result})
                //})
                //    .then(response => {
                //        if (response.ok) {
                //            console.log(e.target.result);
                //        } else {
                //            alert("HTTP-Error: " + response.status);
                //        }
                //    })
            }

            reader.readAsDataURL(input.files[0]);
        }
    </script>


    <div class="item CreateItemModel box">

        @*Item model name and price*@
        <div style="margin-left: 15px; margin-top: 10px;">
            <p>
                Navn: <input type="text" id="ItemModelName" name="ItemModelName"  placeholder="Model navn" @(ViewBag.model?.ModelName != null ?  "value = " + ViewBag.model.ModelName : "") required /> 
                Pris: <input type="text" id="ItemModelPrice" name="ItemModelPrice" placeholder="Pris" @(ViewBag.model?.ModelPrice != null ? "value = " + ViewBag.model.ModelPrice : "") required />
            </p>
        </div>
        
        @*Item table*@
        <div class="ItemTable" style="overflow:scroll;">
            
            <style>
                table, th, td {
                    border: 1px solid black;
                    border-collapse: collapse;
                }
            </style>

            <table id="itemTable" ">
               <tbody id="itemSize">
                   <tr id="itemColor" >
                        <th style="width: 134.18px;">Størrelse:\Farve:</th>
                   </tr>

               </tbody>
            </table>

        </div>


        @*Knapper: Tilføj farve, Fjern farve og Notifikation ved lager*@
        <div style="margin-left: 30px; margin-top: 10px;">
            <input type="submit" id="AddRow" class="button" value="Tilføj størrelse" />
            <input type="submit" id="AddCol" class="button" value="Tilføj farve" />
            <p>Notifikation ved lager beholdning: <input type="text" id="StockNotification" name="StockNotification" placeholder="Antal" @(ViewBag.model?.StockAlarm != null ? "value = " + ViewBag.model.StockAlarm : "") required/></p>

        </div>

    </div>
    
</div>

<div style="margin-left: 80vw;">

    <input type="submit" id="CreateItemModel" class="button" value="Opdater" />

</div>


<script>

    function Grid() {
        //Size = Row
        //Color = Col
        this.rowId = 1;
        this.colId = 1;
        this.rows = 0;
        this.cols = 0;

        //Define domaine for size and color
        const rowDom = document.getElementById('itemSize');
        const colDom = document.getElementById('itemColor');

        //Create itemData for rows and cols
        this.itemData = {};

        this.itemData.rows = {
            amount: 0,
            itemSize: [],
        }

        this.itemData.cols = {
            amount: 0,
            itemColor: [],
        }

        //Check when data entered in table
        this.updateRow = (e) => {
            let id = e.target.id;
            if (id.includes(",")) {
                const ids = id.split(",");
                let row = this.itemData.rows.itemSize.find(row => row.id == ids[0]);
                let field = row.items.find(col => col.colId == ids[1]);
                field.value = e.target.value;

            }
            else {
                let row = this.itemData.rows.itemSize.find(row => row.id == id);
                row.size = e.target.value;
            }


        }

        this.updateCol = (e) => {
            let id = e.target.parentElement.id;
            let col = this.itemData.cols.itemColor.find(col => col.id == id);
            if(e.target.id == "chosenColor"){
                col.colorWheel = e.target.value;
            }else{
                col.color = e.target.value;
            }
        }

        //Add a row, which is size
        this.addRow = () => {
            let newRow = rowDom.insertRow(-1);
            newRow.id = this.rowId;

            newRow.addEventListener("change", grid.updateRow);
            this.itemData.rows.itemSize.push(
                {
                    id: this.rowId,
                    size: "",
                    items: [],
                    dom: newRow,
                }
            );

            const container = newRow.insertCell(0);
            let newElem = document.createElement('input');
            newElem.style = "width: 100px;";
            newElem.placeholder = "Størrelse";
            newElem.id = this.rowId;
            container.append(newElem);

            let newBtn = document.createElement('input');
            newBtn.type = "submit";
            newBtn.value = " - ";
            newBtn.addEventListener("click",grid.delRow);
            container.append(newBtn);
            

            this.rowId++;
            this.itemData.rows.amount++;
            this.updateGrid(newRow);
        }

        //Add a col, which is color
        this.addCol = () => {
            let newCol = colDom.insertCell(-1);
            newCol.id = this.colId;

            newCol.addEventListener("change", grid.updateCol);
            this.itemData.cols.itemColor.push(
                {
                    id: this.colId,
                    color: "",
                    dom: newCol,
                    colorWheel: "000000",

                }
            );

            let newElem = document.createElement('input');
            newElem.style = "width: 100px;";
            newElem.placeholder = "Farve"
            newElem.id = this.colId;
            newCol.append(newElem);
            let newBtn = document.createElement('input');
            let newColor = document.createElement('input')
            newColor.type = "color";
            newColor.id = "chosenColor";
            newColor.name = "chosenColor";
            
            
            newBtn.type = "submit";
            newBtn.value = " - ";
            newBtn.addEventListener("click", grid.delCol);

            newCol.append(newColor);
            newCol.append(newBtn);
          

            this.colId++;
            this.itemData.cols.amount++;
            this.updateGrid(newCol);
        }

        //Check and update grid when either new col or row have been added
        this.updateGrid = (dom) => {

            //Update grid with rows
            if (this.rows != this.itemData.rows.amount) {
                for (let i = 0; i < this.itemData.cols.amount; i++) {

                    let newCell = dom.insertCell(-1);

                    const rowId = dom.id;
                    const colId = this.itemData.cols.itemColor[i].id;

                    const id = rowId + "," + colId;
                    newCell.id = id;
                    newCell.classList = "colId" + colId;
                    let newElem = document.createElement('input');
                    newElem.placeholder="Antal";
                    newElem.id = id;
                    newCell.append(newElem);

                    //Create field in itemData object
                    let row = this.itemData.rows.itemSize.find(row => row.id == rowId);
                    row.items.push({
                        value: "",
                        colId: colId,
                        dom: newCell,

                    })
                }
                this.rows++;

            }
            //Update grid with cols
            else if (this.cols != this.itemData.cols.amount) {
                for (let i = 0; i < this.itemData.rows.amount; i++) {
                    //Create field in html
                    let newCell = this.itemData.rows.itemSize[i].dom.insertCell(-1);

                    const rowId = this.itemData.rows.itemSize[i].id;
                    const colId = dom.id;

                    const id = rowId + "," + colId;
                    newCell.id = id;
                    newCell.classList = "colId"+colId;
                    let newElem = document.createElement('input');
                    newElem.placeholder="Antal";
                    newElem.id = id;
                    newCell.append(newElem);

                    //Create field in itemData object
                    let row = this.itemData.rows.itemSize.find(row => row.id == rowId);
                    row.items.push({
                        value: "",
                        colId: colId,
                        dom: newCell,

                    });
                }
                this.cols++;
            }
            else
                alert("fejl");
        }

        //Delete row with size
        this.delRow = (e) =>{
            let delRow = e.target.closest("tr").rowIndex;
            let rowId = e.target.closest("tr").id;
            document.getElementById("itemTable").deleteRow(delRow);

            let items = this.itemData.rows.itemSize;
            items.splice(items.indexOf(items.find(item => item.id == rowId)), 1);
            this.itemData.rows.amount--;
            this.rows--;
            
        }

        //Delete col with color
        this.delCol = (e) =>{
            let colId = e.target.closest("td").id;
            let items = this.itemData.rows.itemSize;

            if(this.itemData.rows.amount > 0){
                let cell = items[0].items.find(cell => cell.colId == colId);
                const index = items[0].items.indexOf(cell);
                const cellIndex = cell.dom.cellIndex;
                

                items.forEach(item => {
                    item.items.splice(index,1)
                    item.dom.deleteCell(cellIndex)
                });
            }

            let colData = this.itemData.cols.itemColor;
            let colCell = colData.find(col => col.id == colId);
            document.querySelector("#itemColor").deleteCell(colCell.dom.cellIndex);
            colData.splice(colData.indexOf(colCell), 1);


            this.itemData.cols.amount--;
            this.cols--;

        }


        
        //Save grid with item data in SQL database
        this.saveGrid = () => {

            const colNames = {};
            this.itemData.cols.itemColor.forEach((color) => colNames[color.id] = {color: color.color, colorWheel: color.colorWheel});

            const rowNames = {};
            this.itemData.rows.itemSize.forEach((size, index) => rowNames[++index] = size.size);
            
            const items = [];

            this.itemData.rows.itemSize.forEach(row => {
                const rowId = row.id;
                row.items.forEach(item => {
                    items.push({
                        Color: colNames[item.colId].color,
                        ColorWheel: colNames[item.colId].colorWheel,
                        Size: rowNames[rowId],
                        Stock: parseInt(item.dom.children[0].value),
                    })
                })
            });
            return items;
        }
    }

    //Create new grid
    let grid = new Grid();

    //Send table to SQL database
    async function sendDataToDB() {


        const itemModel = {
            ModelName: document.getElementById("ItemModelName").value,
            ModelPrice: parseInt(document.getElementById("ItemModelPrice").value),
            items: grid.saveGrid(),
            StockAlarm: parseInt(document.getElementById("StockNotification").value),
        }

        console.log(itemModel);
        
        if ((isNaN(itemModel.ModelPrice)) || itemModel.ModelPrice == 0 || (isNaN(itemModel.StockAlarm)) || itemModel.StockAlarm == 0){
            alert("Pris eller notifikation ved lager skal være tal"); 
        }
        else if(itemModel.ModelName == ""){
            alert("Mangler model navn");
        }else{
            const response = await fetch("/Admin/ItemModelTable", {
                method: 'PUT', 
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(itemModel) 
            });
            return response.json(); 
        }
    }



    document.querySelector("#AddRow").addEventListener("click", grid.addRow);
    document.querySelector("#AddCol").addEventListener("click", grid.addCol);
    document.querySelector("#CreateItemModel").addEventListener("click", sendDataToDB);

</script>
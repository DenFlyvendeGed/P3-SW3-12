@using P3_Project.Models
@model (PromoCode, List<ItemModel>, List<(int, string)>)

@{
	Layout = "AdminLayout";
	ViewData["Title"] = "Rediger Rabat Kode";

	var (promoCode, itemList, packList) = Model;


	string isModel() {
		if(promoCode.Id == null)
			return "Opret Rabatkode";
		return "Redigér Rabatkode (" + promoCode.Id + ": " + promoCode.Code + ")";
	}
}


<h1>@isModel()</h1>



<div id="editPromoCodeContent">
	<div class="edit-field box">

		<div class="edit">
			<p><b>Navn/Kode:</b> <input id="promo-code-code" value="@promoCode.Code"/></p>
		</div>

		<div class="edit">
			<p><b>Udløbsdato:</b> <input id="promo-code-date" type="date" value="@promoCode.ExpirationDate.ToString("yyyy-MM-dd")"/></p>
		</div>

	</div>

	<div class="edit-field box" style="justify-content:center">
		<div class="edit">

			<p><b>Rabat: </b> <input id="promo-code-value" value="@promoCode.Value" style="text-align:right"/>
				<select id="promo-code-discount-type">
					@{
						async Task AddOption(PromoCodeDiscountType type, string message) {
							if(promoCode.DiscountType == type){
																																																																																																																																								<option value="@((int)type)" selected> @message </option> 
							} else {
																																																							<option value="@((int)type)"> @message </option> 
							}
						}
						AddOption(PromoCodeDiscountType.Percentage, "Procent (%)");
						AddOption(PromoCodeDiscountType.Fixed     , "Fastsat (kr.)");
					}
				</select>
			</p>
		</div>
	</div>

	<div class="edit-field box grid-indhold">
		<div class="grid-indhold1">Indhold</div>

		<div class="grid-indhold1">
			
			<select name="type" id="selectType" onchange="chosenType(this)">
			@{
				if(promoCode.Id != null){
					if(promoCode.ItemType == PromoCodeItemType.Some){
								<option value="" id="0">Alt</option>
								<option value="" id="1">Alle pakker</option>
								<option value="" id="2">Alle genstande</option>
								<option value="" selected id="3">Vælg selv</option>
					}
					else if(promoCode.ItemType == PromoCodeItemType.All){
								<option value="" selected id="0">Alt</option>
								<option value="" id="1">Alle pakker</option>
								<option value="" id="2">Alle genstande</option>
								<option value="" id="3">Vælg selv</option>
					}
					else if(promoCode.ItemType == PromoCodeItemType.AllItems){
								<option value="" id="0">Alt</option>
								<option value="" id="1">Alle pakker</option>
								<option value="" selected id="2">Alle genstande</option>
								<option value="" id="3">Vælg selv</option>
					}
					else if(promoCode.ItemType == PromoCodeItemType.AllPacks){
								<option value="" id="0">Alt</option>
								<option value="" selected id="1">Alle pakker</option>
								<option value="" id="2">Alle genstande</option>
								<option value="" id="3">Vælg selv</option>
					}
				}
				else{
								<option value="" selected hidden>Vælg indholds type</option>
								<option value="" id="0">Alt</option>
								<option value="" id="1">Alle pakker</option>
								<option value="" id="2">Alle genstande</option>
								<option value="" id="3">Vælg selv</option>
				}
				
			}
				
			</select>
			@{
				string toolTip = "Alt: alle vare, både pakker og tøj, Alle pakker: rabat på alle pakker, Alle genstande: rabat på alt tøj og tilbehør, Vælg selv: rabat på valgte vare.";
			}
			<span class="hovertext" data-hover="@(toolTip)">?</span>
		</div>

		<div class="@if(promoCode.ItemType != PromoCodeItemType.Some){<text>toggled</text>} grid-indhold1" id="choseItems">
			<select name="selectItem" id="selectItem" onchange="addItem(this)">
			
				<option value=”” selected hidden>Tilføj vare</option>
					@{
					foreach (ItemModel item in ViewBag.model){
										<option value="@("Vare: "+item.ModelName)" id="@(item.Id)">Vare: @(item.ModelName)</option>
					}

					foreach (var pack in packList){
										<option value="@("Pakke: "+pack.Item2)" id="@(pack.Item1)">Pakke: @(pack.Item2)</option>
					}
					}
            </select>
		</div>
	</div>


	<div class=" @if(promoCode.ItemType != PromoCodeItemType.Some){<text>toggled</text>} edit-field box addedOptions-Grid" style="height: 12vh; overflow:auto;" id="addedItems">
		@{
			if(promoCode.Id != null && promoCode.ItemType == PromoCodeItemType.Some){

				foreach(var item in promoCode.Items){

					var isPack = item.IsPack == true ? Html.Raw("true") : Html.Raw("false");

					if(!item.IsPack){
						var index = itemList.FindIndex(i => i.Id == item.Id);
					
						if(index != -1){

											<div class="addedOptions-Item" id="@(item.Id)" value="@(isPack)">
												@("Vare: "+itemList[index].ModelName)
												<input type="button" value="-" class="delBtn">
											</div>
						}
					}
					else{
						var index = packList.FindIndex(i => i.Item1 == item.Id);
					
						if(index != -1){

											<div class="addedOptions-Item" id="@(item.Id)" value="@(isPack)">
												@("Pakke: "+packList[index].Item2)
												<input type="button" value="-" class="delBtn">
											</div>
						}
					}
					
				}
				

			}
		}
		
	</div>


		<input type="button" onclick="UpdateDB()" value = "@(promoCode.Id == null ? "Opret" : "Opdater")"/>
	</div>

	<script type="text/javascript">

		let items = [];
		let type = 0;
		
		if(@(promoCode.Id != null? Html.Raw("true"): Html.Raw("false"))){

			document.querySelectorAll(".addedOptions-Item").forEach( data => {

				type = 3;
				let id = data.id;
				let value = data.attributes.value.nodeValue;
				let isPack = false;
				if(value == "true"){
					isPack = true;
				}

				let promoData = {
					Id: parseInt(id),
					IsPack: isPack,
				}

				items.push(promoData);
			})

			document.querySelectorAll(".delBtn").forEach( btn => {
				btn.addEventListener("click", removeItem);
			})

		}

		function getData() {
			let rtn = {
				Code : document.getElementById("promo-code-code").value,
				ExpirationDate : document.getElementById("promo-code-date").value,
				DiscountType : parseInt(document.getElementById("promo-code-discount-type").value),
				Value : parseInt(document.getElementById("promo-code-value").value),
				ItemType : parseInt(type),
				Items : items,
			}
			return rtn;
		}

		function addItem(e){
			type = 3;
			
			let target = e.value;
			let id = e.selectedOptions[0].id;

			//Add item to list
			let isPack = false;
			if(target.includes("Pakke")){
				isPack = true;
			}

			let promoData = {
				Id: parseInt(id),
				IsPack: isPack,
			}

			items.push(promoData);


			//Create div & btn
			let newOption = document.createElement("div");
			newOption.classList = "addedOptions-Item";
			newOption.id = id;
			newOption.value = isPack;
			newOption.innerHTML = target;

			let newBtn = document.createElement("input");
			newBtn.type = "button";
			newBtn.value = "-";
			newBtn.classList = "delBtn";
			newBtn.addEventListener("click",removeItem);

			newOption.appendChild(newBtn);
			document.getElementById("addedItems").appendChild(newOption);

		}

		function removeItem(e){

			//Remove div
			let Id = e.target.closest("div").id;
			let Value = e.target.closest("div").value;
			if(Value == undefined){
				Value = e.target.closest("div").attributes.value.nodeValue
			}
			e.target.parentElement.remove();

			//Remove from items list
			for(let i = 0; i < items.length; i++){
				if(items[i].Id == Id && (items[i].IsPack).toString() == (Value).toString()){
					items.splice(i, 1);
				}
			}
		}

		function chosenType(e){
			let typeChosen = e.selectedOptions[0].id;

			let choseItemsDom = document.getElementById("choseItems");
			let addedItemsDom = document.getElementById("addedItems");

			//All
			if(typeChosen == 0){
				type = typeChosen
				
				if(!choseItemsDom.classList.contains("toggled")){
					choseItemsDom.classList.toggle("toggled");
					addedItemsDom.classList.toggle("toggled");
				}

			}
			//All packs
			else if(typeChosen == 1){
				type = typeChosen

				if(!choseItemsDom.classList.contains("toggled")){
					choseItemsDom.classList.toggle("toggled");
					addedItemsDom.classList.toggle("toggled");
				}
			}
			//All items
			else if(typeChosen == 2){
				type = typeChosen

				if(!choseItemsDom.classList.contains("toggled")){
					choseItemsDom.classList.toggle("toggled");
					addedItemsDom.classList.toggle("toggled");
				}
			}
			//Some
			else if(typeChosen == 3){
				type = typeChosen;
				choseItemsDom.classList.remove("toggled");
				addedItemsDom.classList.remove("toggled");
			}
			
		}



		@if(@promoCode.Id == null){	
			<text>function UpdateDB() { 
				fetch("/api/admin/createPromoCode", {
					method : 'POST',
					body : JSON.stringify(getData()) 
				}).then((response) => {
					if(response.ok)
					{
						window.location.href = "/admin/promocode";
					}
					else{
						alert("Oprettelse fejlede, er alle felter udfyldt?")
					}
					
				})
			}</text>
	} else {
			<text>function UpdateDB() { 
				fetch("/api/admin/editPromoCode/@promoCode.Id", {
					method : 'PUT',
					body : JSON.stringify(getData()) 
				}).then((response) => {
					if(response.ok)
					{
						window.location.href = "/admin/promocode";

					}
					else{
						alert("opdatering fejlede")
					}
					
				})
			}</text>
	}


	</script>

	<style>
		#editPromoCodeContent {
			width: 100%;
			margin: auto;
		}
		.edit-field {
			display: flex;
			align-self: center;
			justify-content:space-between;
			margin-top: 4px;
			margin-bottom: 4px;
			margin-left: 0px;
			margin-right: 0px;
			padding: 5px;
		}

		.edit{
			display: flex;
			align-items: center;
			height: inherit;
			padding: 2px;
		}
		.promo-code-price {
			display: inline;
		}

		.edit > p {
			margin: 0px;
		}

		.addedOptions-Grid{
			display: grid;
			grid-template-columns: repeat(4, 24%);
			padding:4px;
			gap: 10px;
			text-align:center;
		}

		.addedOptions-Item{
			background-color: white;
			text-align: center;
			border-style: solid;
			border-width: 1px;
			height:5vh;
			min-height: 5vh;

		}

		.delBtn{
			height: 20px;
			text-align: center;
			vertical-align: text-bottom;
			margin-left: 15%;
		}

		.toggled{
			display: none;
		}

		.grid-indhold {
			display: grid;
			grid-template-columns: repeat(3, 25vw);
			padding:4px;
			text-align:center;
		}

		.grid-indhold1 {
			text-align: center;
		}


	.toggled{
		display: none;
	}

	

	</style>



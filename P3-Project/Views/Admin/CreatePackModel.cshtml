@using P3_Project.Models
@model (PackModel, List<(int, string, string)>)
@{
    var (Packs, Items) = Model;
    Layout = "AdminLayout";
    ViewData["Title"] = "Rediger Pakke";
}

<h1>Rediger Pakke</h1>

@{

    ViewBag.pictures = "";
    if (Model.Item1?.Pictures != null)
    {

        foreach (ImageModel img in Model.Item1.Pictures)
        {
            ViewBag.pictures += "'" + img.FilePath + "', ";
        }
    }
}
<div class="box">
    <div class="flexbox-createPack">
        <h5 style="margin-left:1%; margin-right:30%; display:inline; font-weight: bolder; -ms-transform: translateY(25%); transform: translateY(25%);">
            Angiv navn: <input type="text" class="topBar-Input" id="LeftInput">
        </h5>
        <h5 style="margin-left:1%; margin-right:30%; display:inline; font-weight: bolder; -ms-transform: translateY(25%); transform: translateY(25%);">
            Angiv pris: <input type="text" class="topBar-Input" id="RightInput">
        </h5>


    </div>

    <div class="packGrid">
        <div id="imgBox" class="packItem" style="margin-left: 20%;">
            Tilføj billede
            <div id="img" class="picSize" style="display:block;">
                <input type="button" class="delBut" value="X" />
                @*Billed placehodler*@
                <img id="prodImg" class="picSize" src="" />

            </div>

            @*Buttons*@
            <div style="margin-left: 7%;">
                @*billed vælger*@
                <button class="ASHButton" onclick="lastPic()" style="margin:1px;">Tilbage</button>
                <button class="ASHButton" onclick="nextPic()" style="margin:1px;">Næste</button>
                @*Upload knap*@
                <button class="ASHButton" onclick="document.getElementById('imgUp').click();" style="margin-top:1px;">Upload Billed</button>
                <input class="uploadBut" type="file" multiple accept="image/*" id="imgUp" style="visibility: hidden;" onchange="saveImg">
            </div>

        </div>


        <div class="packItem">
            Tilføj tag
            <div class="box TagBox">
                @{
                    List<Tag>? modelTags = (Model.Item1 != null ? Model.Item1.Tags : null);

                    foreach (Tag tag in Tag.GetAllTags())
                    {
                        <div>
                            <label>@tag.Name</label>
                            <input type="checkbox" id="@tag.Id" class="Clickable" onclick="ToggleTag(this)"
                               @(
                           modelTags != null ?
                           modelTags.Any(modeltag => modeltag.Name == tag.Name) ? Html.Raw("Checked") : ""
                           :
                           ""
                               )>
                            <input type="button" value="-" id="@tag.Id" onclick="DeleteTag(this)">
                        </div>
                    }

                }
            </div>
            <input type="button" value="+" onclick="CreateTagDom(this.previousElementSibling)">

        </div>
    </div>
</div>

<script>
    const tagList = [];
    //Initiate picture
    let pictures = @(ViewBag?.Pictures != null ? Html.Raw("[" + "" + ViewBag.pictures + "" + "]") : Html.Raw("[]"));

    let toBeLoaded = [];
    let currentPic = 0;
    let fileArray = @(Model.Item1?.Pictures != null ? Html.Raw("JSON.parse('" + @Html.Raw(Json.Serialize(Model.Item1.Pictures)) + "')") : Html.Raw("[]"));
    const input = document.querySelector('input.uploadBut');
    const log = document.getElementById('imgUp');
    const imgTag = document.querySelector('#img img');

    //Scroll last picture
    function lastPic() {
        if (currentPic == 0) {
            currentPic = pictures.length - 1;
        } else {
            currentPic--;
        }
        showImg(currentPic);
    }

    //Scroll next picture
    function nextPic() {
        if (currentPic == pictures.length - 1) {
            currentPic = 0;
        } else {
            currentPic++;
        }
        showImg(currentPic);
    }

    //Display picture in box
    function showImg(pic) {
        //console.log(currentPic);
        if (pictures[pic] != undefined)
            imgTag.setAttribute('src', pictures[pic]);
        else
            imgTag.src = "";
    }

    //Save picture in list
    async function saveImg(e) {

        const reader = new FileReader();

        reader.onload = async function (e) {

            imgTag.setAttribute('src', e.target.result);
            pictures.push(e.target.result);
            currentPic = pictures.length - 1;
            console.log(currentPic);

            fileArray.push(
                {
                    Name: reader.file.name,
                    Size: reader.file.size,
                    Type: reader.file.type,
                    Data: reader.result,

                }
            );
            if (toBeLoaded.length != 0) {
                const file = toBeLoaded.pop();
                reader.file = file;
                reader.readAsDataURL(file);
            }
        }

        for (file of input.files) {
            toBeLoaded.push(file);


        }

        if (toBeLoaded.length != 0) {
            const file = toBeLoaded.pop();
            reader.file = file;
            reader.readAsDataURL(file);
        }

    }

    function delImage(e) {
        const img = fileArray[currentPic];
        if (img.Data != null) {
            pictures.splice(currentPic, 1);
            fileArray.splice(currentPic, 1);
            lastPic();
        }
        else {
            fetch("../api/Admin/DeleteImagePack?Id=" + @Model.Item1?.PackID + "&Name=" + img.name + "&FilePath=" + encodeURIComponent(img.filePath),
                {
                    method: "DELETE",
                })
                .then(Response => {
                    if (Response.ok) {
                        pictures.splice(currentPic, 1);
                        fileArray.splice(currentPic, 1);
                        lastPic();
                    }
                    else {
                        alert("Error when deleting image");
                    }
                });
        }
    }

    function ToggleTag(dom) {
        if (dom.checked) {
            AddTag(dom.id);
        }
        else {
            RemoveTag(dom.id);
        }
    }

    function AddTag(Id) {
        const modelId = @(ViewBag?.model != null ? ViewBag.model.Id : 0)
                            if (modelId != 0) {
            fetch("../api/Admin/AddTag?ItemModelId=" + modelId + "&TagId=" + Id,
                {
                    method: "POST",
                })
        }
        else {
            tagList.push({ Id })
        }
        //console.log(Id)
    }

    function RemoveTag(Id) {
        const modelId = @(ViewBag?.model != null ? ViewBag.model.Id : 0)
                            if (modelId != 0) {
            fetch("../api/Admin/RemoveTag?ItemModelId=" + modelId + "&TagId=" + Id,
                {
                    method: "POST",
                })
        }
        else {
            tagList = taglist.splice(tagList.indexOf(Id), 1);
        }
        //console.log(Id)
    }

    function DeleteTag(dom) {
        if (confirm("Er du sikker på at du vil slette " + dom.parentElement.children[0].innerText + " permanent?")) {
            fetch("../api/Admin/DeleteTag?TagId=" + dom.id,
                {
                    method: "POST",
                })

            dom.parentElement.remove();
        }
    }

    function CreateTag(e) {
        const tagName = e.target.previousElementSibling.value;
        fetch("../api/Admin/CreateTag?TagName=" + tagName,
            {
                method: "POST",
            }

        )
            .then(Response => {
                if (Response.ok) {
                    const container = e.target.parentElement;
                    const parent = container.parentElement;

                    const div = document.createElement("div");
                    div.innerHTML =
                        `<div>
                                        <label>`+ tagName + `</label>
                                        <input type="checkbox" id= ` + Response.headers.get('Id') + `  onclick="ToggleTag(this)">
                                        <input type="button" value="-" id="-1" onclick="DeleteTag(this)">
                                    </div>`

                    parent.append(div);
                    container.remove();
                }
            })

    }

    function CreateTagDom(dom) {

        //console.log(dom)

        const input = document.createElement("input");

        const div = document.createElement("div");

        const button = document.createElement("button");

        button.textContent = "Tilføj Tag";
        button.addEventListener("click", CreateTag);
        div.append(input);
        div.append(button);

        dom.append(div);
    }

    if (@(ViewBag.pictures != "" ? Html.Raw("true") : Html.Raw("false"))) {
        nextPic();
    }

    input.addEventListener('input', saveImg);
    document.querySelector(".delBut").addEventListener("click", delImage);
</script>

<p class="buttonBox" onclick="AddChoice()" style="top: 10px; left: 0vw; width: 110px; height: 56px; margin-top: initial; cursor: pointer;">Tilføj valgmulighed</p>

<textarea id="DescriptionBox" style="position: static; width: 50vw; resize: none;" rows="5" placeholder="Beskrivelse"></textarea>

<p class="buttonBox" onclick="UpdateDB()" style="top: 20px; left: 73vw; width: 100px; height: 36px; margin-top: 26px; cursor: pointer;">@(Packs.PackID != null ? Html.Raw("Opdater") : Html.Raw("Opret pakke"))</p>



<script>



    let arraylist = [
    @foreach (var i in Packs.Options)
    {
        <text>[</text>
        @foreach (var j in i)
        {
            <text>@j, </text>
        }
        <text>], </text>
    }
                    ];
    console.log(arraylist);
    window.onload = LoadExistingPack(arraylist.length, arraylist, "@Packs.Name", "@Packs.Price", "@Packs.Description");

    function AddOption(ChoiceNumber) {
        let ItemArray = [
    @foreach (var (id, name, imgPath) in Items)
    {
        <text>{ Name: "@name", Id: "@id", ImgPath: "@Html.Raw(imgPath)" }, </text>
    }
                    ]
        const Array = ["hættetrøje-uden-lynlås", "t-shirt", "Hello there", "General Kenobi"];


        //adding the main box to the flexbox
        const LargeDiv = document.createElement("div");
        LargeDiv.className = "LargeDiv";
        const FlexBox = document.querySelector(`#flexBox-Packcreator-${ChoiceNumber}`); // selecting the pack choice flexbox
        FlexBox.insertBefore(LargeDiv, FlexBox.children[(FlexBox.children.length) - 1]); // inserting into found flexbox and inserting it before all already existing optionfields(The LargeDiv class)
        let number = FlexBox.children.length - 1;

        //creating and appending the option box to the main box
        const Options = document.createElement("div");
        Options.setAttribute("class", "OptionBox");
        Options.setAttribute("style", "left: 65px; height: 158px; width:120px;");
        const ModelImage = document.createElement("img");
        ModelImage.setAttribute("src", "../favicon.ico");
        ModelImage.setAttribute("style", "display: block; max-width: 100%; max-height: 100%; margin-left: auto; margin-right: auto; padding: 20px 0px; ")
        Options.appendChild(ModelImage);
        LargeDiv.appendChild(Options);

        // creating and appending select
        const DropDown = document.createElement("select");
        DropDown.setAttribute("class", "Dropdown-Option");
        DropDown.setAttribute("id", `${ChoiceNumber}Dropdown-Option${number}`);
        DropDown.setAttribute("style", "left:40px;");
        LargeDiv.appendChild(DropDown);
        DropDown.addEventListener("change", loadImg)
        AddOptionFields(ItemArray, DropDown); //<-- helper function to make the select options based on an array it gets passed

        //sæt billedet af første option som Select indeholder
        ModelImage.src = DropDown.selectedOptions[0].imgPath;
        function loadImg(e) {
            //console.log(e.target.selectedOptions[0].imgPath)
            ModelImage.src = e.target.selectedOptions[0].imgPath;
        }

        //creating and appending the minus box and minus
        const MinusBox = document.createElement("div");
        MinusBox.setAttribute("class", "Box-Minus");
        MinusBox.setAttribute("id", `${ChoiceNumber}DeleteOption${number}`);
        MinusBox.setAttribute("onclick", "DeleteOption(this.id)");
        MinusBox.setAttribute("style", "position: relative; left: 200px; bottom: 80px; width: 31px; height: 31px;");
        LargeDiv.appendChild(MinusBox);

        const Minus = document.createElement("img");
        Minus.setAttribute("class", "Minus");
        Minus.setAttribute("src", "../Pics/minus-svgrepo-com.svg");
        MinusBox.appendChild(Minus);
    }


    function DeleteOption(ID) {

        let OptionElement = document.getElementById(ID);
        let ParentElement = OptionElement.parentElement;
        ParentElement.remove();
    }


    function DeleteChoice(ID) {
        let Element = document.getElementById(ID);
        let ParentElement = Element.parentElement;
        ParentElement.remove();
    }
    function AddChoice() {

        const ChoiceDiv = document.createElement("div");
        const Title = document.createElement("h3");

        const Container = document.querySelector(".pb-3");
        const ChoiceNumber = Container.children.length - 7;
        ChoiceDiv.setAttribute("id", `Choice${ChoiceNumber}`);
        Title.appendChild(document.createTextNode(`Valgmulighed ${ChoiceNumber}:`));

        const MinusBox = document.createElement("div");
        MinusBox.setAttribute("class", "Box-Minus");
        MinusBox.setAttribute("id", `Delete${ChoiceNumber}`)
        MinusBox.setAttribute("onclick", "DeleteChoice(this.id)")
        MinusBox.setAttribute("style", `position: relative; right: 5vw; top: -116px; width: 41px; height: 41px; cursor: pointer;`);
        const Minus = document.createElement("img");
        Minus.setAttribute("class", "Minus");
        Minus.setAttribute("src", "../Pics/minus-svgrepo-com.svg");
        MinusBox.appendChild(Minus);

        const FlexBox = document.createElement("div");
        FlexBox.setAttribute("class", "flexBox-Packcreator");
        FlexBox.setAttribute("id", `flexBox-Packcreator-${ChoiceNumber}`);
        FlexBox.setAttribute("style", "margin-bottom: 5px; padding: 4px;");
        ChoiceDiv.appendChild(Title);
        ChoiceDiv.appendChild(FlexBox);
        ChoiceDiv.appendChild(MinusBox);


        const AddButton = document.createElement("div");
        AddButton.setAttribute("class", "OptionBox");
        AddButton.setAttribute("id", "AddOption");
        AddButton.setAttribute("onclick", `AddOption(${ChoiceNumber})`);
        AddButton.setAttribute("style", "left: 60px; height: 138px; width:180px; border: 4px solid #000000;");
        FlexBox.appendChild(AddButton);

        const h2 = document.createElement("h2");
        AddButton.appendChild(h2);

        const strong = document.createElement("strong");
        strong.setAttribute("style", "position: absolute; display: block; margin: auto; left: 50px; top: 30px;");
        h2.appendChild(strong);
        strong.appendChild(document.createTextNode("Tilføj Vare"));

        Container.insertBefore(ChoiceDiv, document.querySelector(".buttonBox"));

    }

    function AddOptionFields(Array, DropDown) {
        for (i = 0; i < Array.length; i++) {
            let Option = document.createElement("option");
            Option.setAttribute("value", `${Array[i].Id}`);
            Option.imgPath = Array[i].ImgPath;
            let Text = document.createTextNode(`${Array[i].Name}`);
            Option.appendChild(Text);
            DropDown.appendChild(Option);
        }
    }

    function FindOptions(id) {
        let NodeList = document.querySelector(`#${id}`).querySelectorAll(".LargeDiv");
        let nodeArray = Array.apply(null, NodeList);
        let ValueArray = [];
        nodeArray.forEach((e) => {
            ValueArray.push(parseInt((e.querySelector(".Dropdown-Option").value)));

        })
        return (ValueArray);
    }

    function ChangeOption(id, OptionValue, value1, value2) {
        document.getElementById(`${value1}Dropdown-Option${value2}`).value = OptionValue;
    }

    function LoadExistingPack(Choices, Options, Name, Price, Description) {
        document.getElementById("LeftInput").value = Name;
        document.getElementById("RightInput").value = Price;
        document.getElementById("DescriptionBox").value = Description;
        if (Options != 0) {
            for (j = 1; j <= Choices; j++) {
                AddChoice();
                for (k = 1; k <= Options[j - 1].length; k++) {
                    AddOption(j);
                    console.log(j);
                    console.log(k);
                    ChangeOption(`flexBox-Packcreator-${j}`, Options[j - 1][k - 1], j, k);
                }
            }
        }
    }

    function UpdateDB() {
        let name = document.getElementById("LeftInput").value;
        let price = parseInt(document.getElementById("RightInput").value);
        let description = document.getElementById("DescriptionBox").value;
        console.log(name, price, description);
        let options = [];

        const Choices = document.querySelectorAll(".flexBox-Packcreator");

        for (i = 0; i < Choices.length; i++) {

            options.push(FindOptions(Choices[i].id));
            console.log(options);
        }

        const formatedTagList = [];
        tagList.forEach(tag => {
            formatedTagList.push(
                {
                    Id: parseInt(tag.Id),
                    Name: "",
                }
            )
        })


        let PayLoad = {
            Name: name,
            Price: price,
            Description: description,
            Options: options,
            Pictures: fileArray,
            Tags: formatedTagList,
        };
        let PackModel = JSON.stringify(PayLoad);
        //console.log(PackModel)

        if (@((Packs.PackID != null).ToString().ToLower())) {
            fetch(`/api/admin/EditPackModel/@Packs.PackID`, {
                method: "PUT",
                headers: {
                    'Content-Type': 'application/json'
                },
                body: PackModel
            })
                .then(response => {
                    if (response.redirected) {
                        window.location.href = response.url;
                    }
                });
        } else {
            fetch("/api/admin/CreatePackModel", {
                method: "POST",
                headers: {
                    'Content-Type': 'application/json'
                },
                body: PackModel
            })
                .then(response => {
                    if (response.redirected) {
                        window.location.href = response.url;
                    }
                });
        }



        /*
        [
          1, 2, 3, 4
        ],
        [
          1
        ]
        */
    }

</script>


<style>
    .packGrid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        margin: 1em;
        align-items: center;
        gap: 10%;
    }

    .packItem {
        display: flex;
        flex-direction: column;
        justify-content: center;
    }

</style>